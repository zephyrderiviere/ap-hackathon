#include <iostream>
#include <vector>
#include <Application.h>

using namespace std;

// Dimensions du donjon
const int WIDTH = 20, HEIGHT = 10;

// Position du joueur
int playerX = 1, playerY = 1;

// Carte du donjon (0 = sol, 1 = mur)
vector<vector<int>> dungeon = {
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1},
    {1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1},
    {1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1},
    {1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1},
    {1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1},
    {1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
};

// Affichage du donjon
void drawDungeon() {
    clear();
    for (int y = 0; y < HEIGHT; ++y) {
        for (int x = 0; x < WIDTH; ++x) {
            if (y == playerY && x == playerX)
                mvprintw(y, x, "@");  
            else if (dungeon[y][x] == 1)
                mvprintw(y, x, "#");  
            else
                mvprintw(y, x, ".");  
        }
    }
    refresh();
}

// Déplacement du joueur
void movePlayer(int dx, int dy) {
    int newX = playerX + dx;
    int newY = playerY + dy;
    if (dungeon[newY][newX] == 0) {  
        playerX = newX;
        playerY = newY;
    }
}

int main() {
    initscr(); 
    noecho();
    keypad(stdscr, TRUE);
    curs_set(0);

    while (true) {
        drawDungeon();
        int ch = getch();
        if (ch == 'q') break;  
        else if (ch == KEY_UP) movePlayer(0, -1);
        else if (ch == KEY_DOWN) movePlayer(0, 1);
        else if (ch == KEY_LEFT) movePlayer(-1, 0);
        else if (ch == KEY_RIGHT) movePlayer(1, 0);
    }

    endwin();
    return 0;
}
###################################################
// déplacements dans la map*
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <conio.h>

using namespace std;

#define LARGEUR_NIVEAU 50
#define HAUTEUR_NIVEAU 15

#define MUR_CARAC 'x'
#define VIDE_CARAC ' '
#define JOUEUR_CARAC '@'
#define COMPAGNON_CARAC 'C'
//reprise des codes de Rémi
vector<vector<char>> lireNiveau(string chemin) {
    ifstream fichier(chemin);
    if (!fichier) {
        cerr << "Erreur: Impossible d'ouvrir le fichier !" << endl;
        exit(EXIT_FAILURE);
    }

    vector<vector<char>> niveau(HAUTEUR_NIVEAU, vector<char>(LARGEUR_NIVEAU, VIDE_CARAC));
    string ligne;
    int i = 0;

    while (getline(fichier, ligne) && i < HAUTEUR_NIVEAU) {
        for (int j = 0; j < min((int)ligne.size(), LARGEUR_NIVEAU); j++) {
            niveau[i][j] = ligne[j];
        }
        i++;
    }

    fichier.close();
    return niveau;
}


void afficherNiveau(const vector<vector<char>> &niveau, int joueurX, int joueurY, int compagnonX, int compagnonY) {
    system("cls"); 

    for (int i = 0; i < HAUTEUR_NIVEAU; i++) {
        for (int j = 0; j < LARGEUR_NIVEAU; j++) {
            if (i == joueurY && j == joueurX)
                cout << JOUEUR_CARAC; 
            else if (i == compagnonY && j == compagnonX)
                cout << COMPAGNON_CARAC; 
            else
                cout << niveau[i][j]; 
        }
        cout << endl;
    }
}

void jouer(vector<vector<char>> &niveau) {
    int joueurX = 2, joueurY = 2;     
    int compagnonX = 1, compagnonY = 1; 
    char touche;

    do {
        afficherNiveau(niveau, joueurX, joueurY, compagnonX, compagnonY);
        touche = _getch(); 

        int newX = joueurX, newY = joueurY;

        switch (touche) {
            case 'z': newY--; break; 
            case 's': newY++; break;  
            case 'q': newX--; break; 
            case 'd': newX++; break; //code de jeu et déplacements
        }

        if (newX >= 0 && newX < LARGEUR_NIVEAU &&
            newY >= 0 && newY < HAUTEUR_NIVEAU &&
            niveau[newY][newX] != MUR_CARAC) {

            compagnonX = joueurX;
            compagnonY = joueurY;

            
            joueurX = newX;
            joueurY = newY;
        }

    } while (touche != 'x'); 
}

int main() {
    vector<vector<char>> niveau = lireNiveau("niveau.txt");
    jouer(niveau);
    return 0;
}
//////// Enemy classe
#include <iostream>
#include <cstdlib>
#include <ctime>

class Ennemi {
private:
    int x, y;       // Position sur la carte
    int pv;         // Points de vie
    int attaque;    // Dégâts infligés

public:
    // Constructeur
    Ennemi(int posX, int posY, int pointsVie, int degats) 
        : x(posX), y(posY), pv(pointsVie), attaque(degats) {}

    // Méthode pour déplacer l'ennemi (déplacement aléatoire)
    void deplacer() {
        int direction = rand() % 4; // 4 directions possibles : 0 = gauche, 1 = droite, 2 = haut, 3 = bas
        switch (direction) {
            case 0: x--; break; // Gauche
            case 1: x++; break; // Droite
            case 2: y--; break; // Haut
            case 3: y++; break; // Bas
        }
    }

    // Méthode pour attaquer (simulé ici)
    void attaquer() {
        std::cout << "L'ennemi attaque et inflige " << attaque << " dégâts !" << std::endl;
    }

    // Méthode pour prendre des dégâts
    void subirDegats(int degats) {
        pv -= degats;
        if (pv <= 0) {
            std::cout << "L'ennemi est vaincu !" << std::endl;
        } else {
            std::cout << "L'ennemi a " << pv << " PV restants." << std::endl;
        }
    }

    // Affichage des informations
    void afficher() const {
        std::cout << "Ennemi -> Position: (" << x << ", " << y << "), PV: " << pv << ", Attaque: " << attaque << std::endl;
    }
};

// Exemple d'utilisation
int main() {
    srand(time(0)); // Initialisation du générateur de nombres aléatoires

    Ennemi gobelin(5, 5, 20, 5);
    gobelin.afficher();

    gobelin.deplacer();
    gobelin.afficher();

    gobelin.attaquer();

    gobelin.subirDegats(10);
    gobelin.afficher();

    return 0;
}
